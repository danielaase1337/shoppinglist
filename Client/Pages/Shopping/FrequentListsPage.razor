@page "/frequent-lists"
@inject HttpClient Http;
@inject BlazorApp.Client.Services.IDataCacheService DataCache

<div class="card-maincontainer container-sm">
    <div class="row card">
        <h2>Hyppige Handlelister</h2>
        <p>Administrer lister med varer som handles ofte - perfekt for ukentlig rutine og spesielle kampanjer.</p>
    </div>

    <!-- Add New Frequent List -->
    <div class="row card">
        <h3>Lag Ny Hyppig Liste</h3>
        <div class="row">
            <div class="col-8">
                <input class="form-control" placeholder="Navn p√• liste (f.eks. 'Standard Ukehandel')" @bind="@_newListName">
            </div>
            <div class="col-4">
                <input class="form-control" placeholder="Beskrivelse" @bind="@_newListDescription">
            </div>
        </div>
        <div class="row mt-2">
            <div class="col">
                <button type="button" class="btn btn-primary" @onclick="@AddFrequentList" disabled="@(string.IsNullOrWhiteSpace(_newListName))">
                    <i class="fas fa-plus"></i> Lag Ny Liste
                </button>
            </div>
        </div>
    </div>

    <!-- Frequent Lists Display -->
    @if (FrequentLists != null)
    {
        @if (!FrequentLists.Any())
        {
            <div class="row card">
                <h6>Det finnes ingen hyppige lister enn√•!</h6>
                <p>Lag din f√∏rste liste for √• komme i gang.</p>
            </div>
        }
        else
        {
            @foreach (var list in FrequentLists)
            {
                <div class="row card">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            @if (list.EditClicked)
                            {
                                <input class="form-control" @bind="@list.Name" style="width: 300px; display: inline-block;" />
                                <input class="form-control mt-1" @bind="@list.Description" style="width: 300px; display: inline-block;" placeholder="Beskrivelse" />
                            }
                            else
                            {
                                <h4>@list.Name</h4>
                                <p class="text-muted">@list.Description</p>
                            }
                        </div>
                        <div>
                            @if (list.EditClicked)
                            {
                                <button type="button" class="btn btn-sm btn-success me-1" @onclick="@(e => SaveFrequentList(list))">
                                    <i class="fas fa-check"></i>
                                </button>
                                <button type="button" class="btn btn-sm btn-secondary me-1" @onclick="@(e => { list.EditClicked = false; })">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-sm btn-outline-primary me-1" @onclick="@(e => { list.EditClicked = true; })">
                                    <i class="fas fa-edit"></i>
                                </button>
                            }
                            <button type="button" class="btn btn-sm btn-outline-danger" @onclick="@(e => DeleteFrequentList(list))">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Items in this frequent list -->
                    <div class="mt-3">
                        <h5>Varer i listen (@(list.Items?.Count ?? 0) varer)</h5>
                        @if (list.Items != null && list.Items.Any())
                        {
                            <div class="row">
                                @foreach (var item in list.Items)
                                {
                                    <div class="col-md-4 col-sm-6 mb-2">
                                        <div class="card p-2">
                                            <div class="d-flex justify-content-between">
                                                <span><strong>@item.Varen?.Name</strong></span>
                                                <span class="badge bg-primary">@item.StandardMengde @item.Varen?.Unit</span>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">Ingen varer lagt til enn√•. Du kan administrere varer via hovedsystemet.</p>
                        }
                    </div>
                </div>
            }
        }
    }
    else
    {
        <div class="row card">
            <div class="text-center">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Laster...</span>
                </div>
                <p>Laster hyppige lister...</p>
            </div>
        </div>
    }
</div>

@code
{
    private ICollection<FrequentShoppingListModel> FrequentLists = new List<FrequentShoppingListModel>();
    private string _newListName = string.Empty;
    private string _newListDescription = string.Empty;

    [Inject]
    public ISettings Settings { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("üîÑ FrequentListsPage: Loading frequent lists...");
        
        try
        {
            await LoadFrequentLists();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error loading frequent lists: {ex.Message}");
            FrequentLists = new List<FrequentShoppingListModel>();
        }
    }

    private async Task LoadFrequentLists()
    {
        try
        {
            var response = await Http.GetAsync(Settings.GetApiUrl(ShoppingListKeysEnum.FrequentShoppingLists));
            if (response.IsSuccessStatusCode)
            {
                FrequentLists = await response.Content.ReadFromJsonAsync<ICollection<FrequentShoppingListModel>>() ?? new List<FrequentShoppingListModel>();
                Console.WriteLine($"‚úÖ Loaded {FrequentLists.Count} frequent lists");
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"‚ùå Failed to load frequent lists: {response.StatusCode}");
                FrequentLists = new List<FrequentShoppingListModel>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Exception loading frequent lists: {ex.Message}");
            FrequentLists = new List<FrequentShoppingListModel>();
        }
    }

    private async Task AddFrequentList()
    {
        if (string.IsNullOrWhiteSpace(_newListName)) return;

        try
        {
            var newList = new FrequentShoppingListModel()
            {
                Name = _newListName.Trim(),
                Description = _newListDescription.Trim(),
                Items = new List<FrequentShoppingItemModel>()
            };

            var response = await Http.PostAsJsonAsync(Settings.GetApiUrl(ShoppingListKeysEnum.FrequentShoppingLists), newList);
            if (response.IsSuccessStatusCode)
            {
                var createdList = await response.Content.ReadFromJsonAsync<FrequentShoppingListModel>();
                if (createdList != null)
                {
                    FrequentLists.Add(createdList);
                    Console.WriteLine($"‚úÖ Added new frequent list: {createdList.Name}");
                    
                    // Clear form
                    _newListName = string.Empty;
                    _newListDescription = string.Empty;
                    StateHasChanged();
                }
            }
            else
            {
                Console.WriteLine($"‚ùå Failed to create frequent list: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Exception creating frequent list: {ex.Message}");
        }
    }

    private async Task SaveFrequentList(FrequentShoppingListModel list)
    {
        try
        {
            list.EditClicked = false;
            var response = await Http.PutAsJsonAsync(Settings.GetApiUrl(ShoppingListKeysEnum.FrequentShoppingLists), list);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine($"‚úÖ Updated frequent list: {list.Name}");
            }
            else
            {
                Console.WriteLine($"‚ùå Failed to update frequent list: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Exception updating frequent list: {ex.Message}");
        }
    }

    private async Task DeleteFrequentList(FrequentShoppingListModel list)
    {
        try
        {
            var response = await Http.DeleteAsync(Settings.GetApiUrlId(ShoppingListKeysEnum.FrequentShoppingList, list.Id));
            if (response.IsSuccessStatusCode)
            {
                FrequentLists.Remove(list);
                Console.WriteLine($"‚úÖ Deleted frequent list: {list.Name}");
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"‚ùå Failed to delete frequent list: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Exception deleting frequent list: {ex.Message}");
        }
    }
}