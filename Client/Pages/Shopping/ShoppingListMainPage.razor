@page "/shoppinglist"
@using BlazorApp.Client.Common
@inject HttpClient Http;
@inject BlazorApp.Client.Services.IDataCacheService DataCache
@inject BlazorApp.Client.Services.IBackgroundPreloadService BackgroundPreload

<div class="card-maincontainer container-sm">

    <div class="row card">
        <h2>Handlelister</h2>
        <div class="row">
            <div class="col">
                <input class="new-todo" placeholder="Navn på listen?" name="newVare" @bind="@_newListName" @onkeyup="OnKeyUpNewListItemHandler">
            </div>
            <div class="col-2">
                <button type="button" class="btn-sm btn-outline-link"><i class="fas fa-check" @onclick="@(f => AddList())"></i></button>
            </div>
        </div>
    </div>
    @if (ShoppingLists != null)
    {
        @if (!ShoppingLists.Any())
        {
            <div class="row card">
                <h6>
                    Det finnes ingen handlelister!
                </h6>
            </div>

        }
        else
        {
            <div class="row card">
                <ul class="todo-list">
                    @foreach (var l in ShoppingLists)
                    {
                        <li class="@l.CssComleteEditClassName">
                            <div class="parent-horizontal-stack">
                                <div class="col-1">
                                    <input type="checkbox" checked="@l.IsDone" @onchange="@(f => ListeChecked(l, f))" />
                                </div>
                                <div class="col">
                                    @if (l.EditClicked)
                                    {
                                        <input class="editing" @bind-value="@(l.Name)" />
                                    }
                                    else
                                    {
                                        <a href="@(GetItemNavLink(l.Id))">
                                            @l.Name
                                        </a>
                                    }
                                </div>

                                @if (l.EditClicked)
                                {
                                    <div class="btn-group" role="group" aria-label="Basic example">
                                        <button type="button" class="editButtonStyle btn-sm btn-outline-success" @onclick="@(e => StoreChange(l))"><i class="fas fa-check"></i></button>
                                        <button type="button" class="editButtonStyle btn-sm btn-outline-warning" @onclick="@(e => { l.EditClicked= false;  })"><i class="fas fa-times"> </i></button>
                                        <button type="button" class="editButtonStyle btn-sm btn-outline-danger" @onclick="@(e => DeleteList(l))"><i class="fas fa-ban"> </i></button>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-2">
                                        <button @onclick="@(e => { l.EditClicked = true;  })"><i class="fas fa-edit"></i></button>
                                    </div>

                                }
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }
    }
    else
    {
        <LoadingComponent> </LoadingComponent>
    }
</div>


@code
{
    private ICollection<ShoppingListModel> ShoppingLists;

    [Inject]
    public ISettings Settings { get; set; }

    public string _newListName { get; set; }

    private string GetItemNavLink(string listeId)
    {
        return $"shoppinglist/{listeId}";
    }
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("📋 ShoppingListMainPage: Checking cache for instant loading...");
        
        try
        {
            // Try to get cached data first for instant display
            ShoppingLists = await DataCache.GetShoppingListsAsync() ?? new List<ShoppingListModel>();
            
            if (ShoppingLists.Any())
            {
                Console.WriteLine($"⚡ Instant load: {ShoppingLists.Count} shopping lists from cache");
                SortShoppingLists(); // Sort after loading
                StateHasChanged(); // Immediately update UI
            }
            else
            {
                Console.WriteLine("📋 No cached data, fetching from API...");
                // If no cache, force refresh to get data
                ShoppingLists = await DataCache.GetShoppingListsAsync(forceRefresh: true) ?? new List<ShoppingListModel>();
                Console.WriteLine($"📋 Loaded {ShoppingLists.Count} shopping lists from API");
                SortShoppingLists(); // Sort after loading
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading shopping lists: {ex.Message}");
            ShoppingLists = new List<ShoppingListModel>();
        }
    }




    private async Task StoreChange(ShoppingListModel item)
    {
        item.EditClicked = false;
        var response = await Http.PutAsJsonAsync(Settings.GetApiUrl(ShoppingListKeysEnum.ShoppingLists), item);
        //await ShoppingListDataManager.Update(item);
        
        if (response.IsSuccessStatusCode)
        {
            // Invalidate cache so other pages see the changes
            DataCache.InvalidateShoppingListsCache();
            Console.WriteLine($"✅ Updated shopping list: {item.Name}");
            
            // Re-sort after update
            SortShoppingLists();
        }
    }

    private async Task DeleteList(ShoppingListModel l)
    {
        var res = await Http.DeleteAsync(Settings.GetApiUrlId(ShoppingListKeysEnum.ShoppingList, l.Id));
        //var res = await ShoppingListDataManager.Delete(l);
        if (res.IsSuccessStatusCode)
        {
            ShoppingLists.Remove(l);
            
            // Invalidate cache so other pages see the deletion
            DataCache.InvalidateShoppingListsCache();
            Console.WriteLine($"✅ Deleted shopping list: {l.Name}");
        }
    }

    private async Task AddList()
    {
        if (string.IsNullOrWhiteSpace(_newListName)) return;
        var newItem = new ShoppingListModel() { Name = _newListName };
        var res = await Http.PostAsJsonAsync(Settings.GetApiUrl(ShoppingListKeysEnum.ShoppingLists), newItem);
        //var res = await ShoppingListDataManager.Insert(newItem);
        if (res != null && res.IsSuccessStatusCode)
        {
            var shoppinglist = await res.Content.ReadFromJsonAsync<ShoppingListModel>();
            if (shoppinglist != null)
            {
                ShoppingLists.Add(shoppinglist);
                
                // Invalidate cache so other pages see the new list
                DataCache.InvalidateShoppingListsCache();
                Console.WriteLine($"✅ Added new shopping list: {shoppinglist.Name}");
                
                // Re-sort after adding
                SortShoppingLists();
            }
        }
        _newListName = string.Empty;
    }


    private async Task ListeChecked(ShoppingListModel l, Microsoft.AspNetCore.Components.ChangeEventArgs value)
    {
        if (value?.Value != null && value.Value is bool bValue)
        {
            l.IsDone = bValue;
            var response = await Http.PutAsJsonAsync(Settings.GetApiUrl(ShoppingListKeysEnum.ShoppingLists), l);
            //await ShoppingListDataManager.Update(l);
            
            if (response.IsSuccessStatusCode)
            {
                // Invalidate cache when list completion status changes
                DataCache.InvalidateShoppingListsCache();
                Console.WriteLine($"✅ Updated shopping list completion: {l.Name} = {bValue}");
                
                // Re-sort after status change
                SortShoppingLists();
            }
            else
            {
                Console.WriteLine($"❌ Failed to update shopping list completion: {l.Name}. Status: {response.StatusCode}");
            }
        }
    }

    private async Task OnKeyUpNewListItemHandler(KeyboardEventArgs args)
    {
        if (args.Code == null && string.IsNullOrEmpty(_newListName)) return;
        if ((args.Code == null && !string.IsNullOrEmpty(_newListName)) ||
            (args.Code != null && args.Code.Equals("Enter")))
            await AddList();
    }
    
    private void SortShoppingLists()
    {
        var naturalComparer = new NaturalSortComparer();
        
        // Sort with completed lists at the bottom
        // 1. Active lists (IsDone = false): Newest first, then natural name sort
        // 2. Completed lists (IsDone = true): Newest first, then natural name sort
        ShoppingLists = ShoppingLists
            .OrderBy(f => f.IsDone)                                        // Active (false) first, completed (true) last
            .ThenByDescending(f => f.LastModified ?? DateTime.MinValue)   // Within each group: newest first
            .ThenBy(f => f.Name, naturalComparer)                          // Within same date: natural sort
            .ToList();
            
        Console.WriteLine($"📊 Sorted {ShoppingLists.Count} shopping lists (active first, then completed)");
    }
    
    private void OrderLists()
    {
        // Use the new sorting method
        SortShoppingLists();
    }

}
