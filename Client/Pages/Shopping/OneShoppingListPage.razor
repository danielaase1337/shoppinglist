@page "/shoppinglist/{id}"
@using BlazorApp.Client.Services

@inject HttpClient Http
@inject ISettings Settings
@inject IDataCacheService DataCache 

@if (newVareModel != null)
{
    <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
        <DialogTemplates>
            <Header> Legg til vare</Header>
            <Content>
                <div class="container">

                    <div class="row" style="padding-top:6px">
                        <SfTextBox Placeholder='Vare navn' FloatLabelType='@FloatLabelType.Auto'
                               @bind-Value=@newVareModel.Name></SfTextBox>
                    </div>
                    <div class="row" style="padding-top:4px">
                        <SfAutoComplete TValue="string"
                                    TItem="ItemCategoryModel"
                                    DataSource="@AvailableCategories"
                                    Placeholder="Velg kategori?"
                                    AllowFiltering="true"
                                    FilterType="FilterType.Contains"
                                    Highlight>
                            <AutoCompleteFieldSettings Value="Name" Text="Name" />
                            <AutoCompleteEvents TItem="ItemCategoryModel" TValue="string"
                                            ValueChange="@SelectedItemCategoryChanged">

                            </AutoCompleteEvents>
                        </SfAutoComplete>
                    </div>
                    <div class="row" style="padding-top:4px">
                        <p>Valgt kategori: </p>
                        @if (newVareModel.ItemCategory != null)
                        {
                            <p style="padding-top:4px">@newVareModel.ItemCategory.Name</p>
                        }
                    </div>

                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="Lager" IsPrimary="true" OnClick="@HideModalAndSave" />
            <DialogButton Content="Avbry" OnClick="@HideModal" />
        </DialogButtons>
    </SfDialog>

}


@if (ThisShoppingList != null)
{
    
    <div class="card-maincontainer container-sm">
        <div class="card">
            <div class="row align-items-center mb-3">
                <div class="col">
                    <h5 class="shopping-list-title @showH2LabelStyle" @ondblclick="@ListHeaderKeyUpEventHandler">@ThisShoppingList.Name</h5>
                    <input class="@showEditHeader" @bind-value="@ThisShoppingList.Name" @onkeyup="@(f => ListHeaderClickEventHandler(f))" />
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col-12">
                    <SfDropDownList TValue="string" 
                                  TItem="ShopModel" 
                                  Placeholder="Velg butikk for sortering" 
                                  DataSource="@AvailableShops" 
                                  @bind-Index="@shopIndex" 
                                  Width="100%"
                                  PopupHeight="300px">
                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="ShopModel" ValueChange="OnShopSelectionChanged"></DropDownListEvents>
                    </SfDropDownList>
                </div>
            </div>

            <div class="row align-items-center mb-3">
                <div class="col">
                    <SfDropDownList TValue="string" 
                                  TItem="FrequentShoppingListModel" 
                                  Placeholder="Importer fra hyppig liste..." 
                                  DataSource="@FrequentLists" 
                                  @bind-Index="@frequentListIndex" 
                                  Width="100%"
                                  PopupHeight="300px">
                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                        <DropDownListEvents TValue="string" TItem="FrequentShoppingListModel" ValueChange="OnFrequentListSelected"></DropDownListEvents>
                    </SfDropDownList>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary" @onclick="ImportFromFrequentList" disabled="@(frequentListIndex == null || frequentListIndex < 0)" title="Importer varer fra valgt liste">
                        <i class="fas fa-file-import"></i> Importer
                    </button>
                </div>
            </div>

            <div class="row align-items-center mb-4">
                <div class="col">
                    <SfAutoComplete TValue="string"
                                TItem="ShopItemModel"
                                DataSource="@Varer"
                                Placeholder="Hva skal handles?"
                                @bind-Value="@autoValue"
                                FilterType="FilterType.Contains"
                                Width="100%"
                                PopupHeight="300px"
                                Highlight>
                        <AutoCompleteFieldSettings Value="Name" Text="Name" />
                        <AutoCompleteEvents TItem="ShopItemModel" TValue="string"
                                        ValueChange="@SelectedShopItemChanged"></AutoCompleteEvents>
                    </SfAutoComplete>
                </div>
                <div class="col-auto">
                    <button class="btn btn-add-item" title="Legg til vare">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </div>
        </div>

        @if (!ThisShoppingListItems.Any())
        {
            <div class="card">
                <div class="row">
                    <h6>Handelisten er tom, legg til varer for å komme igang.</h6>
                </div>
            </div>

        }
        else
        {
            <div class="card">
                <div class="row">
                    <ul class="todo-list">
                        @foreach (var vare in ThisShoppingListItems)
                        {
                            <li class="@vare.CssComleteEditClassName">
                                <div class="parent-horizontal-stack">
                                    <div class="col-1">
                                        <input type="checkbox" checked="@vare.IsDone" @onchange="@(f=> VareCheckChanged(f, vare))" />
                                    </div>
                                    <div class="col">
                                        <a @onclick="@(f => VareClicked(vare.Varen))">
                                            @vare.Varen.Name
                                        </a>
                                    </div>
                                    <div class="col-3">
                                        <input class="vareInputEdit" @bind-value="vare.Mengde" @onfocusout="(f=> VareMengdeFocusLost())" />
                                    </div>
                                    <div class="col-2">
                                        <button class="commandBtns"
                                    @onclick="@(e => DeleteVare(vare))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </div>

                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
        <div class="row">
            <ListSummaryFooter NItems="@ThisShoppingList.ShoppingItems.Where(f => !f.IsDone).Count()"
                           DeleteAllCompletedClikced="@(f => DeleteAllClicked())"
                           FilterList="@(f=> FilterList(f))"
                           ShowDeleteAll="@(ThisShoppingList.ShoppingItems.Where(f=>f.IsDone).Any())">
            </ListSummaryFooter>
        </div>
    </div>


}
else
{
    <LoadingComponent></LoadingComponent>
}

@code {
   

    string autoValue;

    string activeListFiler = "all";
    string showEditHeader = "hidden";
    string showH2LabelStyle = "";
    string dropdownText = "Velg buikk";

    // Frequent Lists for import
    ICollection<FrequentShoppingListModel> FrequentLists = new List<FrequentShoppingListModel>();
    int? frequentListIndex = null;
    FrequentShoppingListModel? selectedFrequentList = null;

    [Parameter]
    public string Id { get; set; }


    ShopItemModel? newVareModel = new ShopItemModel();

    public ShoppingListModel ThisShoppingList { get; set; }
    public ICollection<ShoppingListItemModel> ThisShoppingListItems { get; set; }
    public ICollection<ShopItemModel> Varer { get; set; }
    public ICollection<ItemCategoryModel> AvailableCategories { get; set; }
    ICollection<ShopModel> AvailableShops { get; set; }





    protected override async Task OnParametersSetAsync()
    {
        var ok = !string.IsNullOrEmpty(Id);
        if (!ok)
            return;

        try
        {
            Console.WriteLine($"🚀 Loading shopping list page for ID: {Id}");
            var startTime = DateTime.Now;

            // Load shopping list details and shared data in parallel
            var shoppingListTask = DataCache.GetShoppingListAsync(Id);
            var itemsTask = DataCache.GetItemsAsync();
            var categoriesTask = DataCache.GetCategoriesAsync();
            var shopsTask = DataCache.GetShopsAsync();
            var frequentListsTask = LoadFrequentLists();

            // Wait for all tasks to complete
            await Task.WhenAll(shoppingListTask, itemsTask, categoriesTask, shopsTask, frequentListsTask);

            // Assign results
            ThisShoppingList = await shoppingListTask;
            Varer = await itemsTask;
            AvailableCategories = await categoriesTask;
            AvailableShops = await shopsTask;

            if (ThisShoppingList != null)
                ThisShoppingListItems = ThisShoppingList.ShoppingItems;

            FilterList(activeListFiler);

            var loadTime = DateTime.Now - startTime;
            Console.WriteLine($"⚡ Shopping list page loaded in {loadTime.TotalMilliseconds:F0}ms");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading shopping list page: {ex.Message}");
        }
    }

    private async Task LoadFrequentLists()
    {
        try
        {
            FrequentLists = await DataCache.GetFrequentListsAsync();
            Console.WriteLine($"📋 Loaded {FrequentLists.Count} frequent lists for import");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error loading frequent lists: {ex.Message}");
            FrequentLists = new List<FrequentShoppingListModel>();
        }
    }

    private void OnFrequentListSelected(ChangeEventArgs<string, FrequentShoppingListModel> args)
    {
        if (args.ItemData != null)
        {
            selectedFrequentList = args.ItemData;
            Console.WriteLine($"📝 Selected frequent list: {selectedFrequentList.Name}");
        }
    }

    private async Task ImportFromFrequentList()
    {
        if (selectedFrequentList == null || ThisShoppingList == null)
        {
            Console.WriteLine("⚠️ No frequent list selected or shopping list not loaded");
            return;
        }

        try
        {
            Console.WriteLine($"📥 Importing {selectedFrequentList.Items?.Count ?? 0} items from '{selectedFrequentList.Name}'");
            
            int addedCount = 0;
            int skippedCount = 0;

            if (selectedFrequentList.Items != null)
            {
                foreach (var frequentItem in selectedFrequentList.Items)
                {
                    if (frequentItem.Varen == null) continue;

                    // Check if item already exists in shopping list
                    var existingItem = ThisShoppingList.ShoppingItems
                        .FirstOrDefault(si => si.Varen?.Id == frequentItem.Varen.Id);

                    if (existingItem != null)
                    {
                        // Item exists, optionally update quantity
                        existingItem.Mengde += frequentItem.StandardMengde;
                        skippedCount++;
                        Console.WriteLine($"  ➕ Updated quantity for: {frequentItem.Varen.Name}");
                    }
                    else
                    {
                        // Add new item with standard quantity
                        var newItem = new ShoppingListItemModel
                        {
                            Varen = frequentItem.Varen,
                            Mengde = frequentItem.StandardMengde,
                            IsDone = false
                        };
                        ThisShoppingList.ShoppingItems.Add(newItem);
                        addedCount++;
                        Console.WriteLine($"  ✅ Added: {frequentItem.Varen.Name} (x{frequentItem.StandardMengde})");
                    }
                }
            }

            // Save updated shopping list
            await UpdateShoppinglist(ThisShoppingList);
            FilterList(activeListFiler);

            // Reset selection
            frequentListIndex = null;
            selectedFrequentList = null;

            Console.WriteLine($"✅ Import complete: {addedCount} added, {skippedCount} updated");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error importing from frequent list: {ex.Message}");
        }
    }

    public async Task DeleteVare(ShoppingListItemModel m)
    {
        ThisShoppingList.ShoppingItems.Remove(m);

        var updated = await Http.PutAsJsonAsync<ShoppingListModel>(Settings.GetApiUrl(ShoppingListKeysEnum.ShoppingLists), ThisShoppingList);
        if (updated != null && updated.IsSuccessStatusCode)
            ThisShoppingList = await updated.Content.ReadFromJsonAsync<ShoppingListModel>();
        FilterList(activeListFiler);
    }

    private async Task AddVare(ShopItemModel shopItem)
    {
        ShoppingListItemModel newItem = new ShoppingListItemModel() { Mengde = 1, IsDone = false, Varen = shopItem };
        
        // Add new item at the top instead of bottom
        var itemsList = ThisShoppingList.ShoppingItems.ToList();
        itemsList.Insert(0, newItem);
        ThisShoppingList.ShoppingItems = itemsList;

        await UpdateShoppinglist(ThisShoppingList);

        FilterList(activeListFiler);
    }

    private async Task AddCategory(ItemCategoryModel newCategory)
    {
        var existing = AvailableCategories.FirstOrDefault(f => f.Name.ToLower().Equals(newCategory.Name.ToLower()));
        if (existing != null)
        {
            if (newVareModel != null)
                newVareModel.ItemCategory = existing;
            return;
        }
        else
        {
            var respons = await Http.PostAsJsonAsync<ItemCategoryModel>(Settings.GetApiUrl(ShoppingListKeysEnum.itemcategorys), newCategory);
            if(respons != null && respons.IsSuccessStatusCode)
            {
                var newCat = respons.Content.ReadFromJsonAsync<ItemCategoryModel>()?.Result;
                if (newCat != null)
                {
                    AvailableCategories.Add(newCat);
                    if (newVareModel != null)
                        newVareModel.ItemCategory = newCat;
                }
            }

        }

    }

    void VareClicked(ShopItemModel varen)
    {
        Console.Write(varen.Name);
        newVareModel = varen;
        justUpdateVare = true;
        this.IsVisible = true;

    }

    void ListHeaderKeyUpEventHandler()
    {
        showH2LabelStyle = "hidden";
        showEditHeader = "";
    }
    async Task ListHeaderClickEventHandler(KeyboardEventArgs args)
    {

        if (args.Code.Equals("Enter"))
        {
            showH2LabelStyle = "";
            showEditHeader = "hidden";
            await Http.PutAsJsonAsync<ShoppingListModel>(Settings.GetApiUrl(ShoppingListKeysEnum.ShoppingLists), ThisShoppingList);

        }
    }
    async Task SelectedShopItemChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ShopItemModel> newValue)
    {
        if (newValue == null) return;
        if (newValue.ItemData is ShopItemModel item)
        {
            if (item.IsValid())
                await AddVare(item).ContinueWith(f =>
                {
                    autoValue = null;
                });
            else
            {
                newVareModel = new ShopItemModel();
                newVareModel.Name = item.Name;
                IsVisible = true;
            }

        }
    }

    async Task SelectedItemCategoryChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ItemCategoryModel> selectedCategory)
    {
        if (selectedCategory.ItemData is ItemCategoryModel itemCat)
        {
            await AddCategory(itemCat);
        }
    }

    private async Task CheckAllItems(bool f)
    {
        foreach (var vare in ThisShoppingList.ShoppingItems)
        {
            vare.IsDone = f;
        }
        await UpdateShoppinglist(ThisShoppingList);


    }
    private async Task VareCheckChanged(Microsoft.AspNetCore.Components.ChangeEventArgs f, ShoppingListItemModel vare)
    {
        if (f.Value is bool bValue)
        {
            Console.WriteLine("bvalue");
            vare.IsDone = bValue;
            FilterList(activeListFiler);
            await UpdateShoppinglist(ThisShoppingList);
        }


    }
    private async Task UpdateShoppinglist (ShoppingListModel liste)
    {
        // Update LastModified timestamp before saving
        liste.LastModified = DateTime.UtcNow;
        
        await Http.PutAsJsonAsync<ShoppingListModel>(Settings.GetApiUrl(ShoppingListKeysEnum.ShoppingLists), ThisShoppingList);
    }

    public async Task VareMengdeFocusLost()
    {
        await UpdateShoppinglist(ThisShoppingList);

    }

    public async Task DeleteAllClicked()
    {
        var completed = ThisShoppingList.ShoppingItems.Where(f => f.IsDone).ToList();


        foreach (var item in completed)
        {
            var url = await Http.DeleteAsync(Settings.GetApiUrlId(ShoppingListKeysEnum.ShopItem, item.Id));
            ThisShoppingList.ShoppingItems.Remove(item);
        }
        FilterList(activeListFiler);
    }
    public void FilterList(object value)
    {
        if (value is string sValue)
        {
            activeListFiler = sValue;
            if (activeListFiler.Equals("done"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems
                    .Where(f => f.IsDone)
                    .OrderBy(f => f.Varen.ItemCategory.SortIndex)
                    .ToList();
            }
            else if (activeListFiler.Equals("active"))
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems
                    .Where(f => !f.IsDone)
                    .OrderBy(f => f.Varen.ItemCategory.SortIndex)
                    .ToList();
            }
            else //all
            {
                ThisShoppingListItems = ThisShoppingList.ShoppingItems
                    .OrderBy(f => f.Varen.ItemCategory.SortIndex)
                    .ToList();
            }
        }
    }

    private int? shopIndex { get; set; } = -1;
    ShopModel SelectedShop { get; set; }
    
    void OnShopSelectionChanged(ChangeEventArgs<string, ShopModel> args)
    {
        Console.WriteLine($"Shop selection changed to: {args?.ItemData?.Name}");
        // Automatically sort when shop is selected
        SortShoppingList();
        StateHasChanged();
    }
    
    void SortShoppingList()
    {
        Console.WriteLine($"SortShoppingList called. shopIndex: {shopIndex}");
        
        if (shopIndex == null || shopIndex == -1) 
        {
            Console.WriteLine("No shop selected - cannot sort");
            // TODO - lag notifikasjon til bruker om at butikk må velges først
            return;
        }

        Console.WriteLine($"Sorting with shop index: {shopIndex}");
        
        // OPTIMIZATION 1: Use ElementAt() instead of ToArray() conversion
        SelectedShop = AvailableShops.ElementAt(shopIndex.Value);
        Console.WriteLine($"Selected shop: {SelectedShop.Name}");
        
        if (SelectedShop.ShelfsInShop == null) 
        {
            Console.WriteLine("No shelfs found in selected shop");
            return;
        }

        Console.WriteLine($"Found {SelectedShop.ShelfsInShop.Count} shelfs in shop");

        // OPTIMIZATION 2: Use Dictionary for O(1) lookup instead of O(M) FirstOrDefault
        var categoryToSortIndex = new Dictionary<string, int>(StringComparer.OrdinalIgnoreCase);
        
        // Build category sort index mapping efficiently - FIXED ALGORITHM
        foreach (var shelf in SelectedShop.ShelfsInShop)
        {
            Console.WriteLine($"Processing shelf: {shelf.Name}, SortIndex: {shelf.SortIndex}");
            
            var categoryIndexInShelf = 0;
            foreach (var cat in shelf.ItemCateogries)
            {
                categoryIndexInShelf++;
                
                // CORRECT CALCULATION: (ShelfIndex * 1000) + CategoryIndex
                // This ensures shelf order is preserved, then category order within shelf
                var sortIndex = (shelf.SortIndex * 1000) + categoryIndexInShelf;
                
                // Use both exact name and trimmed/normalized name for matching
                categoryToSortIndex[cat.Name] = sortIndex;
                categoryToSortIndex[cat.Name.Trim()] = sortIndex;
                categoryToSortIndex[cat.Id] = sortIndex;
                Console.WriteLine($"  Category: {cat.Name} assigned SortIndex: {sortIndex} (Shelf: {shelf.SortIndex}, Cat: {categoryIndexInShelf})");
            }
        }

        Console.WriteLine($"Built category mapping with {categoryToSortIndex.Count} categories");

        // OPTIMIZATION 3: Update sort indices in single pass with O(1) lookup
        var itemsUpdated = 0;
        foreach (var item in ThisShoppingList.ShoppingItems)
        {
            var category = item.Varen.ItemCategory;
            int sortIndex = 0;
            
            // Try multiple matching strategies
            if (categoryToSortIndex.TryGetValue(category.Id, out sortIndex) ||
                categoryToSortIndex.TryGetValue(category.Name, out sortIndex) ||
                categoryToSortIndex.TryGetValue(category.Name.Trim(), out sortIndex))
            {
                item.Varen.ItemCategory.SortIndex = sortIndex;
                itemsUpdated++;
                Console.WriteLine($"  Matched '{item.Varen.Name}' category '{category.Name}' to SortIndex: {sortIndex}");
            }
            else
            {
                Console.WriteLine($"  NO MATCH for '{item.Varen.Name}' category '{category.Name}' (ID: '{category.Id}')");
                // Keep existing sort index (likely 0)
            }
        }
        
        Console.WriteLine($"Updated sort index for {itemsUpdated} items");

        // OPTIMIZATION 4: Sort in-place using ToList() for correct collection type
        var beforeSort = ThisShoppingList.ShoppingItems.Count;
        ThisShoppingList.ShoppingItems = ThisShoppingList.ShoppingItems
            .OrderBy(f => f.Varen.ItemCategory.SortIndex)
            .ToList();
        
        Console.WriteLine($"Sorted {beforeSort} items. Final count: {ThisShoppingList.ShoppingItems.Count}");
        
        // DEBUG: Show final sorted order with item names and sort indices
        Console.WriteLine("=== FINAL SORTED ORDER ===");
        int index = 1;
        foreach (var item in ThisShoppingList.ShoppingItems)
        {
            Console.WriteLine($"{index}. {item.Varen.Name} (Category: {item.Varen.ItemCategory.Name}, SortIndex: {item.Varen.ItemCategory.SortIndex})");
            index++;
        }
        Console.WriteLine("=== END SORTED ORDER ===");
        
        // Apply current filter to the newly sorted list
        FilterList(activeListFiler);
        
        Console.WriteLine("SortShoppingList completed successfully");
        
        // FORCE UI UPDATE: Tell Blazor to re-render the component
        StateHasChanged();
    }
    #region Modal handling

    private bool IsVisible { get; set; } = false;
    bool justUpdateVare = false;
    private async Task HideModalAndSave()
    {

        if (newVareModel != null)
        {
            if (!newVareModel.IsValid()) return;

            if (justUpdateVare)
                await Http.PutAsJsonAsync<ShopItemModel>(Settings.GetApiUrl(ShoppingListKeysEnum.shopItems), newVareModel).ContinueWith(f => { autoValue = null; });
            else
            {
                if (newVareModel.IsValid())
                {
                    await Http.PostAsJsonAsync<ShopItemModel>(Settings.GetApiUrl(ShoppingListKeysEnum.shopItems), newVareModel);
                    Varer.Add(newVareModel);
                    await AddVare(newVareModel).ContinueWith(f => { autoValue = null; });
                }
            }

        }
        justUpdateVare = false;
        this.IsVisible = false;

    }
    private void HideModal()
    {
        newVareModel = null;
        justUpdateVare = false;
        this.IsVisible = false;
    }
    #endregion
}
